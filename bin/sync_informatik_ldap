#!/usr/bin/env ruby
# encoding: UTF-8

require 'thor'
require 'ruby-plsql'
require 'redis'
require 'net-ldap'
require 'awesome_print'
require 'digest/sha1'
require 'json'
require 'pry'
require 'active_support/core_ext'

class SyncInformatiktLDAP < Thor

  LDAP_CHECKSUM_SET = 'informatik:s_checksum_ldap_informatik'
  LDAP_UID_SET      = 'informatik:s_uid_ldap_informatik'
  UMT_CHECKSUM_SET  = 'informatik:s_checksum_umt'
  UMT_UID_SET       = 'phsyik:s_uid_umt'
  UMT_ACCOUNT_BY_UID_HASH  = 'informatik:h_accounts_by_uid'
  UMT_ACCOUNT_BY_CHECKSUM_HASH  = 'informatik:h_accounts_by_checksum'

  desc 'refresh','refresh the table'
  def refresh
    connect_umt
    plsql.physik_pkg.refreshPhysikAccountsTbl;
  end

  desc 'new','add all missing accounts to the ldap'
  def new
    cleanup_redis_db
    fetch_umt
    fetch_ldap

    counter = 0
    missing_entries.each do |uid|
      counter += 1
      puts "#{counter}: #{uid}"
      write_new_entry uid
    end
  end

  desc "update","update ldap accounts"
  def update
    cleanup_redis_db
    fetch_umt
    fetch_ldap

    unless 0 == missing_entries.size
      puts "[ERROR] there are missing entries left."
      puts "[ERROR] run 'sync_physik_ldap new' first"
      exit
    end

    counter = 0
    update_candidates.each do |checksum|
      write_update_entry checksum
      counter += 1
    end
    puts "#{counter} Eintraege aktualisiert"
  end

private
  def connect_redis
    @redis ||= Redis.new
  end

  def connect_umt
    plsql.connection = OCI8.new(
      ENV.fetch('UMT_USER'),
      ENV.fetch('UMT_PASSWORD'),
      ENV.fetch('UMT_SID'))
  end

  def connect_ldap
    unless @ldap
      @ldap = Net::LDAP.new
      @ldap.host = ENV.fetch('LDAP2_ITZ_HOST')
      @ldap.port = ENV.fetch('LDAP2_ITZ_PORT')
      @ldap.encryption :simple_tls
      @ldap.auth ENV.fetch('LDAP2_ITZ_USER'), ENV.fetch('LDAP2_ITZ_PASSWORD')
    end
  end

  def cleanup_redis_db
    connect_redis
    @redis.del LDAP_CHECKSUM_SET
    @redis.del LDAP_UID_SET
    @redis.del UMT_CHECKSUM_SET
    @redis.del UMT_UID_SET
    @redis.del UMT_ACCOUNT_BY_CHECKSUM_HASH
    @redis.del UMT_ACCOUNT_BY_UID_HASH
  end

  def fetch_umt
    connect_umt
    connect_redis

    records = nil
    plsql.physik_pkg.getAccounts { |cursor| records = cursor.fetch_all }

    records.each do |record|
      checksum = build_checksum(record[1] + record[0] + record[3])

      entry = {
        sname:     record[0],
        gname:     record[1],
        nkz:       record[2],
        mail:      record[3],
        uidNumber: record[4],
        checksum:  checksum}

      @redis.hmset(
        UMT_ACCOUNT_BY_CHECKSUM_HASH,
        checksum,
        entry.to_json)

      @redis.hmset(
        UMT_ACCOUNT_BY_UID_HASH,
        entry[:nkz],
        entry.to_json)

      @redis.sadd UMT_CHECKSUM_SET, checksum
      @redis.sadd UMT_UID_SET, entry[:nkz]
    end

  end

  def fetch_ldap
    connect_ldap
    connect_redis

    filter = Net::LDAP::Filter.eq 'uid','*'
    basedn = 'ou=user,ou=physik,o=mlu,c=de'
    attr = ['carLicense','uid']


    @ldap.search(base: basedn, filter: filter, attributes: attr) do |entry|
      unless entry[:carLicense].empty?
        @redis.sadd LDAP_CHECKSUM_SET,entry[:carLicense][0]
      end
      @redis.sadd LDAP_UID_SET,entry[:uid][0]
    end
  end

  def write_new_entry uid
    connect_ldap
    connect_redis
    entry = JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_UID_HASH, uid).
      symbolize_keys

    dn = "uid=#{entry[:nkz]},ou=user,ou=physik,o=mlu,c=de"
    attributes = {
      uid: entry[:nkz],
      sn: entry[:sname],
      givenname: entry[:gname],
      cn: "#{entry[:gname]} #{entry[:sname]}",
      homedirectory: "/home/#{entry[:nkz]}",
      uidnumber: "#{entry[:uidNumber]}",
      gidnumber: "10001",
      shadowlastchange: "0",
      shadowmax: "3650",
      shadowmin: "0",
      carlicense: "#{entry[:checksum]}",
      loginshell: "/bin/false",
      userpassword: Net::LDAP::Password.generate(:sha, 'secret00'),
      objectClass: ["top","inetOrgPerson","posixAccount","shadowAccount"]}

    unless @ldap.add dn: dn, attributes: attributes
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def get_account_by_checksum checksum
    JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_CHECKSUM_HASH, checksum).
      symbolize_keys
  end

  def write_update_entry checksum
    entry = get_account_by_checksum checksum

    dn = "uid=#{entry[:nkz]},ou=user,ou=physik,o=mlu,c=de"

    operations = [
      [:replace, :givenname, entry[:gname]],
      [:replace, :sn, entry[:sname]],
      [:replace, :mail, entry[:mail]],
      [:replace, :carlicense, entry[:checksum]]]

    unless @ldap.modify dn: dn, operations: operations
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def missing_entries
    @redis.sdiff UMT_UID_SET, LDAP_UID_SET
  end

  def update_candidates
    @redis.sdiff UMT_CHECKSUM_SET, LDAP_CHECKSUM_SET
  end

  def build_checksum string
    Digest::SHA1.hexdigest string
  end
end

SyncInformatiktLDAP.start
