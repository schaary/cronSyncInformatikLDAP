#!/usr/bin/env ruby
# encoding: UTF-8

require 'thor'
require 'ruby-plsql'
require 'redis'
require 'net-ldap'
require 'awesome_print'
require 'digest/sha1'
require 'json'
#require 'pry'
require 'active_support'
require 'active_support/core_ext'
require 'mysql2'
require 'base64'

class SyncInformatiktLDAP < Thor

  LDAP_CHECKSUM_SET = 'informatik:s_checksum_ldap_informatik'
  LDAP_UID_SET      = 'informatik:s_uid_ldap_informatik'
  UMT_CHECKSUM_SET  = 'informatik:s_checksum_umt'
  UMT_UID_SET       = 'informatik:s_uid_umt'
  UMT_ACCOUNT_BY_UID_HASH  = 'informatik:h_accounts_by_uid'
  UMT_ACCOUNT_BY_CHECKSUM_HASH  = 'informatik:h_accounts_by_checksum'

  desc 'refresh','refresh the table'
  def refresh
    connect_idm
    plsql.informatik_pkg.refreshInformatikAccountsTbl
  end

  # desc 'mysql_test','test connection to mysql server'
  # def mysql_test
  #   puts count_sp_passwords 'nmaef'
  #   puts "{SSHA}#{Base64.encode64(fetch_sp_password 'nmaef')}"
  # end

  desc 'new','add all missing accounts to the ldap'
  def new
    cleanup_redis_db
    fetch_idm
    fetch_ldap

    counter = 0
    missing_entries.each do |uid|
      counter += 1
      puts "#{counter}: #{uid}"
      write_new_entry uid
    end

    puts "Es wurden #{counter} viele Eintraege neu geschrieben"
  end

  desc "update","update ldap accounts"
  def update
    cleanup_redis_db
    fetch_idm
    fetch_ldap

    unless 0 == missing_entries.size
      puts "[ERROR] there are missing entries left."
      puts "[ERROR] run 'sync_informatik_ldap new' first"
      exit
    end

    counter = 0
    update_candidates.each do |checksum|
      write_update_entry checksum
      counter += 1
    end
    puts "Es wurden #{counter} Eintraege aktualisiert"
  end

private
  def connect_redis
    @redis ||= Redis.new
  end

  def connect_idm
    plsql.connection = OCI8.new(
      ENV.fetch('UMT_USER'),
      ENV.fetch('UMT_PASSWORD'),
      ENV.fetch('UMT_SID'))
  end

  def connect_ldap
    unless @ldap
      @ldap = Net::LDAP.new
      @ldap.host = ENV.fetch('LDAP1_ITZ_HOST')
      @ldap.port = ENV.fetch('LDAP1_ITZ_PORT')
      @ldap.encryption :simple_tls
      @ldap.auth ENV.fetch('LDAP1_ITZ_USER'), ENV.fetch('LDAP1_ITZ_PASSWORD')
    end
  end

  def cleanup_redis_db
    connect_redis
    @redis.del LDAP_CHECKSUM_SET
    @redis.del LDAP_UID_SET
    @redis.del UMT_CHECKSUM_SET
    @redis.del UMT_UID_SET
    @redis.del UMT_ACCOUNT_BY_CHECKSUM_HASH
    @redis.del UMT_ACCOUNT_BY_UID_HASH
  end

  def connect_mysql
    @mysql ||= Mysql2::Client.new \
      host: 'mysql.itz.uni-halle.de',
      username: 'root',
      password: 'aiaJe7e6MHscqkwOfpyUuIwILTqqYKbH',
      port: 3306,
      database: 'a6abz_sp_production_20141023'

    @mysql.query_options.merge!(:symbolize_keys => true)
  end

  def fetch_idm
    connect_idm
    connect_redis

    records = nil
    plsql.informatik_pkg.accountList { |cursor| records = cursor.fetch_all }

    counter = 0
    records.each do |record|
      counter = counter + 1
      checksum = build_checksum(record[1] + record[2])

      entry = {
        uid:       record[0],
        firstname: record[1],
        lastname:  record[2],
        uidNumber: record[3],
        password:  record[4],
        gidNumber: record[5],
        checksum:  checksum}

      @redis.hmset(
        UMT_ACCOUNT_BY_CHECKSUM_HASH,
        checksum,
        entry.to_json)

      @redis.hmset(
        UMT_ACCOUNT_BY_UID_HASH,
        entry[:uid],
        entry.to_json)

      @redis.sadd UMT_CHECKSUM_SET, checksum
      @redis.sadd UMT_UID_SET, entry[:uid]
    end
    puts "Es wurden #{counter} Eintraege aus dem IDM eingelesen."
  end

  def fetch_ldap
    connect_ldap
    connect_redis

    filter = Net::LDAP::Filter.eq 'uid','*'
    basedn = 'ou=users,ou=informatik,o=mlu,c=de'
    attr = ['carLicense','uid']

    counter = 0
    @ldap.search(base: basedn, filter: filter, attributes: attr) do |entry|
      counter = counter + 1
      unless entry[:carLicense].empty?
        @redis.sadd LDAP_CHECKSUM_SET,entry[:carLicense][0]
      end
      @redis.sadd LDAP_UID_SET,entry[:uid][0]
    end
    puts "Es wurden #{counter} Eintraege aus dem LDAP eingelesen."
  end

  def write_new_entry uid
    connect_ldap
    connect_redis
    entry = JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_UID_HASH, uid).
      symbolize_keys

    dn = "uid=#{entry[:uid]},ou=users,ou=informatik,o=mlu,c=de"
    attributes = {
      uid: entry[:uid],
      sn: entry[:lastname],
      givenname: entry[:firstname],
      cn: "#{entry[:firstname]} #{entry[:lastname]}",
      homedirectory: "/home/#{entry[:uid]}",
      uidnumber: "#{entry[:uidNumber]}",
      gidnumber: "#{entry[:gidNumber]}",
      carlicense: "#{entry[:checksum]}",
      loginshell: "/bin/false",
      userpassword: Net::LDAP::Password.generate(:sha, "#{entry[:password]}"),
      objectClass: ["top","inetOrgPerson","posixAccount"]}

    # puts dn
    # ap attributes
    # puts ''
    unless @ldap.add dn: dn, attributes: attributes
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def get_account_by_checksum checksum
    JSON.parse(
      @redis.hget UMT_ACCOUNT_BY_CHECKSUM_HASH, checksum).
      symbolize_keys
  end

  def write_update_entry checksum
    entry = get_account_by_checksum checksum

    dn = "uid=#{entry[:uid]},ou=users,ou=informatik,o=mlu,c=de"

    operations = [
      [:replace, :givenname, entry[:gname]],
      [:replace, :sn, entry[:sname]],
      [:replace, :carlicense, entry[:checksum]]]

    unless @ldap.modify dn: dn, operations: operations
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def missing_entries
    @redis.sdiff UMT_UID_SET, LDAP_UID_SET
  end

  def update_candidates
    @redis.sdiff UMT_CHECKSUM_SET, LDAP_CHECKSUM_SET
  end

  def build_checksum string
    Digest::SHA1.hexdigest string
  end

  def count_sp_passwords uid
    connect_mysql

    cursor = @mysql.query \
      "select count(*) counter " +
        "from users u " +
       "inner join histories h " +
          "on u.id = h.user_id " +
       "where u.uid = '#{uid}'"

    cursor.first[:counter]
  end

  def fetch_sp_password uid
    connect_mysql

    cursor = @mysql.query \
      "select distinct h.password_hash " +
        "from users u " +
       "inner join histories h " +
          "on u.id = h.user_id " +
       "where u.uid = '#{uid}' " +
       "order by h.created_at desc " +
       "limit 1"

    cursor.first[:password_hash]
  end
end

SyncInformatiktLDAP.start
